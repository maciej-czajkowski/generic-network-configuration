from anytree import PreOrderIter, Node


class ConfigGenerator:
    def generate(self):
        pass

    def write_to_file(self, filename):
        pass


class CiscoConfigGenerator(ConfigGenerator):

    __COMMENT_SIGN = '!'

    def __init__(self, root):
        self.__root = root
        self.__config = []
        self.__generate()

    def __generate(self):
        for node in PreOrderIter(self.__root):
            if node.parent == self.__root:
                self.__config.append(self.__COMMENT_SIGN + '\n')
            if node.name == "root":
                continue
            self.__config.append(self.create_indent(node.depth) + node.name + '\n')

    def get_config(self):
        return self.__config

    def create_indent(self, depth):
        space = ''
        i = 1
        while i < depth:
            space = space + ' '
            i += 1
        return space

    def write_to_file(self, filename):
        file = open(filename, "w")
        file.write(''.join(str(e) for e in self.__config))
        file.close()


class JuniperConfigGenerator(ConfigGenerator):
    """class responsible for parsing node tree into Juniper configuration file"""

    def __init__(self, root):
        self.__root = root
        self.__config = []
        self.__config.append("##Generated by \"Network Configuration Parser\"")
        self.__generate()

    def create_indent(self, length):
        i = 1
        tabs = ""
        indent = "\t"
        while i < length:
            tabs = tabs + indent
            i += 1
        return tabs

    def __generate(self):
        current_depth = self.__root.depth + 1
        for node in PreOrderIter(self.__root):
            if (node.name == "root"):
                continue
            if node.depth < current_depth:
                difference = current_depth - node.depth
                while difference:
                    self.__config.append(self.create_indent(current_depth - 1) + "}")
                    difference -= 1
                    current_depth -= 1
            if node.is_leaf:
                self.__config.append(self.create_indent(node.depth) + node.name + ";")
            else:
                self.__config.append(self.create_indent(node.depth) + node.name + " {")
            current_depth = node.depth
        while current_depth > 1:
            self.__config.append(self.create_indent(current_depth - 1) + "}")
            current_depth -= 1

    def get_config(self):
        return self.__config

    def write_to_file(self, filename):
        file = open(filename, "w")
        file.write("".join(str(n) + "\n" for n in self.__config))
        file.close()
